<?php
/**
 * Created by PhpStorm.
 * User: lingf
 * Date: 2017-03-02
 * Time: 17:59
 */

namespace Wormhole\Protocols\HD10\Protocol;
use Wormhole\Protocols\Library\ASCII;
use Wormhole\Protocols\Library\BIN;
use Wormhole\Protocols\Library\CheckSum;
use Wormhole\Protocols\Library\CheckXOR;

class Frame1 implements \JsonSerializable
{
    public $isValid = FALSE;
    //帧头固定
    protected  $start = 0x48;
    //命令码
    protected $cmd;
    //功能码
    protected $func;
    //数据域长度
    protected $length = [BIN::class,2,FALSE];
    //桩编号
    protected $code = [ASCII::class,8];
    /**
     * @var CheckXOR 异或校验
     */
    protected $checkXOR =[CheckXOR::class,1];
//    帧尾固定
    protected $end = 0x44;


    public function __construct()
    {
        $properties = get_object_vars($this);

        foreach ($properties as $key=>$value){
            $repeat = count($value);

            if(1 == $repeat && !class_exists($value)){
                $this->$key = $value;
                continue;
            }

            if(1 == $repeat && class_exists($value)){

                $this->$key = new $value;
                continue;
            }

            $class = $value[0];
            $length = 1 < $repeat ? $value[1] : NULL;
            $dir = 3 == $repeat ? $value[2] : NULL;
            if(class_exists($class)){
                if(is_null($length) && is_null($dir)){

                    $this->$key = new $class();
                    continue;
                }

                if(!is_null($length) && is_null($dir)){

                    $this->$key = new $class($length);
                    continue;
                }

                if(!is_null($length) && !is_null($dir)){

                    $this->$key = new $class($length,$dir);
                    continue;
                }
            }

        }

    }

    public function __toString()
    {
        $str = "";
        //return parent::__toString(); // TODO: Change the autogenerated stub
        $properties = get_object_vars($this);

        $this->unsetProperty($properties);

        $dataArea = strval($this->code);

        foreach ($properties as $key=>$value){
            $dataArea .= $value;
        }
        $frame = chr($this->start);
        $frame .= chr($this->cmd);
        $frame .= chr($this->func);
        call_user_func($this->length,strlen($dataArea));
        $frame .=$this->length;
        $frame .=$dataArea;

        $this->checkXOR($frame);
        $frame.=$this->checkXOR;

        $frame .= chr($this->end);
        return $frame;
    }


    public function __get($name)
    {

        return $this->$name;
    }
    function jsonSerialize()
    {
        $array = [];
        foreach ($this as $key=>$value){

            $array[$key]= $value;
        }
        return $array;
    }
    public function __call($name, $arguments)
    {
//         $this->$name = $arguments[0];

        if(is_object($this->$name)) {
            call_user_func($this->$name, $arguments[0]);
        }else{
            $type = gettype($this->$name);
            switch ($type){
                case "boolean":{
                    $this->$name=boolval($arguments[0]);
                    break;
                }
                case "string":{
                    $this->$name=strval($arguments[0]);
                    break;
                }
                case "float":{
                    $this->$name=floatval($arguments[0]);
                    break;
                }
                case "array":{
                    $this->$name=array_values($arguments[0]);
                    break;
                }
                case "object":{
                    call_user_func($this->$name, $arguments[0]);
                }
            }
        }
    }
    public function __invoke($value)
    {

        if(strlen($value)<15){  //长度不够
            return ;
        }

        $properties = get_object_vars($this);

        $this->unsetProperty($properties);
        $position =0;

        $start = substr($value,$position++,1);

        if(chr($this->start) != $start){ //无有效开始

            return;
        }

        //命令码/功能码
        $this->cmd = ord(substr($value,$position++,1));//bindec(substr($value,$position++,1));
        $this->func = ord(substr($value,$position++,1));//bindec(substr($value,$position++,1));

        //数据域+桩编号长度
        $length =substr($value,$position,2);
        call_user_func($this->length,$length);
        $position+=2;
 
        $end = substr($value,$position+$this->length->getValue()+1,1);
        if(chr($this->end) != $end){   //无效的结束符
            return;
        }
        //桩编号
        $code = substr($value,$position,8);
        $position+=8;
        $this->code($code);


        foreach ($properties as $key=>$v){

            $length =  empty($value) ? 0:$this->$key->length;
            $subValue = substr($value,$position,$length);
            call_user_func($this->$key, $subValue);
            $position+=$length;
        }

        if(strlen($value) < $position +2){ //当前位置是校验值后面还有结束位
            return ;
        }


        $this->checkXOR(substr($value,0,$position));
        $calcXor = $this->checkXOR;
        $xor = substr($value,$position,1);

//        if($calcXor != $xor){
//            return ;
//        }

        $this->isValid = TRUE;

        return $this;
    }

    private function unsetProperty(array &$properties){
        unset($properties['start']);
        unset($properties['length']);
        //命令码
        unset($properties['cmd']);
        //功能码
        unset($properties['func']);
        unset($properties['code']);


        unset($properties['checkXOR']);
        unset($properties['end']);

        unset($properties['isValid']);
    }

}